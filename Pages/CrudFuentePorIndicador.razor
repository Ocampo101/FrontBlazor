<!--  Define la ruta URL para acceder a esta página (será accesible en /productos)-->
@page "/fuentePorIndicador"  
<!--  Importa el espacio de nombres para trabajar con listas y colecciones -->
@using System.Collections.Generic  
@using System.Text.Json  
<!--  Importa el espacio de nombres para trabajar con JSON -->
@using Services 
@using System.Net.Http
@using System.Net.Http.Json
@using System.Linq 
@using System.Text


@inject NavigationManager Navigation
<!--  Importa el espacio de nombres donde se encuentra el ServicioEntidad-->
@inject ServicioEntidad servicioEntidad  
<!--  Inyecta el servicio que se comunicará con la API ServicioEntidad -->
@inject NavigationManager navegacionManager  
<!--  Inyecta el servicio para manejar la navegación entre páginas ServicioEntidad-->


<PageTitle>Fuentes</PageTitle>  <!-- Define el título que se mostrará en la pestaña del navegador -->

<h1>Fuentes - Indicador</h1>  <!-- Encabezado principal de la página -->

<div class="mb-3">  <!-- Contenedor con margen inferior (mb-3 es una clase de Bootstrap) -->
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick='() => AbrirModal(0, 0, "Create")'>Crear Nuevo</button>  <!-- Botón deshabilitado para crear nuevos productos -->
</div>

<!-- Bloque condicional que muestra un indicador de carga si los datos están cargando -->
<!-- Si no está cargando pero no hay productos o la lista es nula, muestra un mensaje informativo -->
<!-- Si hay productos para mostrar, muestra la tabla -->
@if (cargando)
{
    <p><em>Cargando...</em></p>  <!-- Mensaje de carga con énfasis (cursiva) -->
}
else if (fuentePorIndicador == null || fuentePorIndicador.Count == 0)
{
    <p>No hay información disponibles.</p>  <!-- Mensaje cuando no hay productos para mostrar -->
}
else
{
    <div class="table-responsive">  <!-- Contenedor que hace que la tabla sea responsive (se pueda desplazar horizontalmente en dispositivos pequeños) -->
        <table class="table table-striped">  <!-- Tabla con estilos de Bootstrap (filas alternas sombreadas) -->
            <thead>  <!-- Encabezado de la tabla -->
                <tr>  <!-- Fila del encabezado -->
                    <th>Fuente</th>
                    <th>Indicador</th>
                </tr>
            </thead>
            <tbody>  <!-- Cuerpo de la tabla donde se muestran los datos -->
                <!-- Bucle foreach que itera sobre cada producto en la lista -->
                @foreach (var tpFuenteIndi in fuentePorIndicador)
                {
                    string tempId = @ObtenerValor(tpFuenteIndi, "fkidindicador");
                    string tempfuente = @ObtenerValor(tpFuenteIndi, "fkidfuente");

                    <tr>  <!-- Fila para cada producto -->
                        <td>@ObtenerNombreFuente(tpFuenteIndi)</td>
                        <td>@ObtenerNombreIndicador(tpFuenteIndi)</td>
                        <td>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick='() => AbrirModal(Convert.ToInt32(tempId), Convert.ToInt32(tempfuente), "Edit")'>Editar</button>
                        </td>
                        <td><button id="" class="btn btn-danger" @onclick="() => EliminarRegistro(Convert.ToInt32(tempId), Convert.ToInt32(tempfuente))">Eliminar</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}

@if (mensaje != null)
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="liveToast" class="toast align-items-center text-white bg-@tipoAlerta border-0 show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    @mensaje
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close" @onclick="() => mensaje = null"></button>
            </div>
        </div>
    </div>
}


    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">PopUp</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    <label for="indicador" class="form-label">Indicador:</label>
                    <select class="form-control" @bind="inidicadorSeleccionado">
                        <option value="">Seleccione un Indicador</option>
                        @foreach (var tpIndi in indicador)
                        {
                            <option value='@ObtenerValor(tpIndi, "id")'>@ObtenerValor(tpIndi, "nombre")</option>
                        }
                    </select>
                    <br>
                    <label for="repre" class="form-label">Fuente:</label>
                    <select class="form-control" @bind="fuenteSeleccionada">
                        <option value="">Seleccione una Fuente</option>
                        @foreach (var tpFuente in fuente)
                        {
                            <option value='@ObtenerValor(tpFuente, "id")'>@ObtenerValor(tpFuente, "nombre")</option>
                        }
                    </select>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="@GuardarCambios">Save changes</button>
                </div>
            </div>
        </div>
    </div>



@code {
    // Lista para almacenar los productos que se obtienen de la API
    private List<Dictionary<string, object>> fuentePorIndicador = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> indicador = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> fuente = new List<Dictionary<string, object>>();
    
    // Bandera para indicar si se están cargando los datos
    private bool cargando = true;
    
    // Variable para almacenar mensajes de error
    private string? mensaje = null;

    //Variable para almacenar el tipo de alerta
    private string? tipoAlerta = "info";
    
    // Constantes para los parámetros de la API
    private const string PROYECTO = "pry";
    private const string TABLA = "fuentesporindicador";

    // Método que se ejecuta cuando se inicializa el componente
    protected override async Task OnInitializedAsync()
    {
        // Llamar al método para cargar los productos
        await CargarRepreVisualInidicador();
        await CargarIndicador();
        await CargarFuente();
    }

    private async Task CargarFuente(){
        fuente = await servicioEntidad.ObtenerTodosAsync("proyecto", "fuente") ?? new();
    }

    private async Task CargarIndicador(){
        indicador = await servicioEntidad.ObtenerTodosAsync("proyecto", "indicador") ?? new();
    }

    // Método asíncrono para cargar los productos desde la API
    private async Task CargarRepreVisualInidicador()
    {
        // Establecer la bandera de carga en verdadero
        cargando = true;
        // Limpiar cualquier mensaje de error previo
        mensaje = null;
        
        try
        {
            // Obtener todos los productos usando el servicio de entidades
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            
            // Si la lista no es null, asignarla a la variable productos
            if (resultado != null)
            {
                fuentePorIndicador = resultado;
            }
            else
            {
                // Si es null, inicializar como lista vacía para evitar errores
                fuentePorIndicador = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            //Especificar tipo de alerta
            tipoAlerta = "danger";

            // En caso de error, guardar el mensaje y crear lista vacía
            mensaje = $"Error al cargar tipo de actores: {ex.Message}";
            fuentePorIndicador = new List<Dictionary<string, object>>();
        }
        finally
        {
            // Establecer la bandera de carga en falso una vez finalizada la operación
            cargando = false;
        }
    }

    // Método para obtener un valor específico de un diccionario de manera segura
    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        // Verificar si el diccionario es null
        if (diccionario == null)
            return string.Empty;
            
        // Verificar si el diccionario contiene la clave
        if (diccionario.TryGetValue(clave, out var valor))
        {
            // Devolver el valor como cadena, o cadena vacía si es null
            return valor?.ToString() ?? string.Empty;
        }
        
        // Si la clave no existe, devolver cadena vacía
        return string.Empty;
    }

    // Método para formatear un valor como precio
    private string FormatearPrecio(string valor)
    {
        // Verificar si la cadena está vacía
        if (string.IsNullOrEmpty(valor))
            return "$0.00";
            
        // Intentar convertir el valor a decimal
        if (decimal.TryParse(valor, out decimal precio))
        {
            // Formatear como moneda con el símbolo $ y dos decimales
            return precio.ToString("C");
        }
        
        // Si no se puede convertir, devolver el valor original
        return valor;
    }

    public int inidicadorSeleccionado;
    public int fuenteSeleccionada;
    public int inidicadorIncial;
    public int fuenteInicial;
    public string peticionSeleccionada = "";


    public void AbrirModal(int indicador, int fuenteVisual, string peticion)
    {
        inidicadorSeleccionado = indicador;
        fuenteSeleccionada = fuenteVisual;
        inidicadorIncial = indicador;
        fuenteInicial = fuenteVisual;
        peticionSeleccionada = peticion;
    }


    private string ObtenerNombreFuente(Dictionary<string, object> entidad)
    {
        if (entidad.TryGetValue("fkidfuente", out var fkidfuente))
        {
            var persona = fuente.FirstOrDefault(p => ObtenerValor(p, "id") == fkidfuente?.ToString());
            return persona != null ? ObtenerValor(persona, "nombre") : "(sin fuente)";
        }

        return "(sin fuente)";
    }

    private string ObtenerNombreIndicador(Dictionary<string, object> entidad)
    {
        if (entidad.TryGetValue("fkidindicador", out var fkidindicador))
        {
            var persona = indicador.FirstOrDefault(p => ObtenerValor(p, "id") == fkidindicador?.ToString());
            return persona != null ? ObtenerValor(persona, "nombre") : "(sin indicador)";
        }

        return "(sin indicador)";
    }


    private async Task GuardarCambios()
    {

        var body = new Dictionary<string, object>
        {
            { "fkidindicador", inidicadorSeleccionado },
            { "fkidfuente", fuenteSeleccionada }
        };

        HttpResponseMessage tempRespuesta = new HttpResponseMessage();
        string tipoMsg = string.Empty;

        try
        {
            if(peticionSeleccionada == "Create")
            {
                var respuesta = await servicioEntidad.CrearAsync(PROYECTO, TABLA, body);
                tempRespuesta = respuesta;
                tipoMsg = "Creado";
            }
            else if(peticionSeleccionada == "Edit")
            {   
                body["accion"] = "edit";
                body["indicadorInicial"] = inidicadorIncial;
                body["fuenteInicial"] = fuenteInicial;

                var respuesta = await servicioEntidad.EjecutarProcedimientoAsync(
                    "pry",
                    "tbl",
                    "accion_fuente_por_indicador",
                    body
                );

                tempRespuesta = respuesta;
                tipoMsg = "Actualizado";
                
            }
            else{

                tipoAlerta = "warning";
                mensaje = "Acción no permitida, seleccione una acción valida";
                resetMensaje();
            }


            var serverMessage = await tempRespuesta.Content.ReadAsStringAsync();


            if (!tempRespuesta.IsSuccessStatusCode)
            {
                tipoAlerta = "danger";

                if (!string.IsNullOrWhiteSpace(serverMessage) && serverMessage.Length > 150)
                {
                    mensaje = "Internal error for duplicate key";
                }
                else
                {
                    mensaje = !string.IsNullOrWhiteSpace(serverMessage) ? serverMessage : tempRespuesta.ReasonPhrase;
                }
            }
            else
            {
                tipoAlerta = "success";
                mensaje = !string.IsNullOrWhiteSpace(serverMessage) ? serverMessage : $"Registro {tipoMsg} Exitosamente!";
                resetMensaje();
            }

        }
        catch (HttpRequestException ex)
        {
            tipoAlerta = "danger";
            mensaje = $"Error en la petición: {ex.Message}";
            Console.WriteLine($"Error en la petición: {ex.Message}");
        }
        
    }
    

    private async Task EliminarRegistro(int idindicador, int idFuente)
    {

        try
        {
            var body = new Dictionary<string, object>
            {
                { "fkidindicador", idindicador },
                { "fkidfuente", idFuente },
                { "indicadorInicial", 0 },
                { "fuenteInicial", 0 }
            };

            body["accion"] = "delete";

            var respuesta = await servicioEntidad.EjecutarProcedimientoAsync(
                "pry",
                "tbl",
                "accion_fuente_por_indicador",
                body
            );

            var serverMessage = await respuesta.Content.ReadAsStringAsync();
            
            if (!respuesta.IsSuccessStatusCode)
            {
                tipoAlerta = "danger";

                if (!string.IsNullOrWhiteSpace(serverMessage) && serverMessage.Length > 150)
                {
                    mensaje = "Error al intentar eliminar el registro, verifique sus dependencias";
                }
                else
                {
                    mensaje = !string.IsNullOrWhiteSpace(serverMessage) ? serverMessage : respuesta.ReasonPhrase;
                }
            }
            else
            {
                tipoAlerta = "success";
                mensaje = "Registro Eliminado Exitosamente!";
                resetMensaje();
            }

        }
        catch (HttpRequestException ex)
        {
            tipoAlerta = "danger";
            mensaje = $"Error en la petición: {ex.Message}";
            Console.WriteLine($"Error en la petición: {ex.Message}");
        }
        
    }

    private async void resetMensaje(){
        
        await Task.Delay(2000);
        mensaje = null;
        tipoAlerta = "info";
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

}