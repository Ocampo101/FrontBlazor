<!--  Define la ruta URL para acceder a esta página (será accesible en /productos)-->
@page "/indicador"  
<!--  Importa el espacio de nombres para trabajar con listas y colecciones -->
@using System.Collections.Generic  
@using System.Text.Json  
<!--  Importa el espacio de nombres para trabajar con JSON -->
@using Services 
@using System.Net.Http
@using System.Net.Http.Json
@using System.Linq 
@using System.Text


@inject NavigationManager Navigation
<!--  Importa el espacio de nombres donde se encuentra el ServicioEntidad-->
@inject ServicioEntidad servicioEntidad  
<!--  Inyecta el servicio que se comunicará con la API ServicioEntidad -->
@inject NavigationManager navegacionManager  
<!--  Inyecta el servicio para manejar la navegación entre páginas ServicioEntidad-->


<PageTitle>Indicador</PageTitle>  <!-- Define el título que se mostrará en la pestaña del navegador -->

<h1>Indicadores</h1>  <!-- Encabezado principal de la página -->

<div class="mb-3">  <!-- Contenedor con margen inferior (mb-3 es una clase de Bootstrap) -->
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick='() => AbrirModal("","","","","","","","","","","","","","","", "Create")'>Crear Nuevo</button>  <!-- Botón deshabilitado para crear nuevos productos -->
</div>

<style>

    td {
        vertical-align: middle;
        padding: 10px;
    }

</style>

<!-- Bloque condicional que muestra un indicador de carga si los datos están cargando -->
<!-- Si no está cargando pero no hay productos o la lista es nula, muestra un mensaje informativo -->
<!-- Si hay productos para mostrar, muestra la tabla -->
@if (cargando)
{
    <p><em>Cargando...</em></p>  <!-- Mensaje de carga con énfasis (cursiva) -->
}
else if (indicadores == null || indicadores.Count == 0)
{
    <p>No hay información disponibles.</p>  <!-- Mensaje cuando no hay productos para mostrar -->
}
else
{
    <div style="width: 100%; overflow-x: auto; max-width: 75vw;">
        <div class="table-responsive" style="white-space: normal;;">  <!-- Contenedor que hace que la tabla sea responsive (se pueda desplazar horizontalmente en dispositivos pequeños) -->
            <table class="table table-striped" style="table-layout: auto;">  <!-- Tabla con estilos de Bootstrap (filas alternas sombreadas) -->
                <thead>  
                    <tr style="text-align: center;">  
                        <th>Codigo</th>
                        <th>Nombre</th>
                        <th>Objetivo</th>
                        <th>Alcance</th>
                        <th>Formula</th>
                        <th>Tipo Indicador</th>
                        <th>Unidad de Medición</th>
                        <th>Meta</th>
                        <th>Sentido</th>
                        <th>Frecuencia</th>
                        <th>id Articulo</th>
                        <th>id Literal</th>
                        <th>id Numeral</th>
                        <th>id Paragrafo</th>
                        
                    </tr>
                </thead>
                <tbody>  <!-- Cuerpo de la tabla donde se muestran los datos -->
                    <!-- Bucle foreach que itera sobre cada producto en la lista -->
                    @foreach (var tpIndi in indicadores)
                    {
                        string tempId = ObtenerValor(tpIndi, "id");
                        string tempCode = ObtenerValor(tpIndi, "codigo");
                        string tempNombre = ObtenerValor(tpIndi, "nombre");
                        string tempObjetivo = ObtenerValor(tpIndi, "objetivo");
                        string tempAlcance = ObtenerValor(tpIndi, "alcance");
                        string tempFormula = ObtenerValor(tpIndi, "formula");
                        string tempTipoIndi = ObtenerValor(tpIndi, "fkidtipoindicador");
                        string tempUnidad = ObtenerValor(tpIndi, "fkidunidadmedicion");
                        string tempMeta = ObtenerValor(tpIndi, "meta");
                        string tempSentido = ObtenerValor(tpIndi, "fkidsentido");
                        string tempFrec = ObtenerValor(tpIndi, "fkidfrecuencia");
                        string tempArt = ObtenerValor(tpIndi, "fkidarticulo");
                        string tempLiteral = ObtenerValor(tpIndi, "fkidliteral");
                        string tempNumeral = ObtenerValor(tpIndi, "fkidnumeral");
                        string tempPrgfo = ObtenerValor(tpIndi, "fkidparagrafo");

                        <tr>  
                            <td style="min-width: 110px;">@tempCode</td> 
                            <td style="min-width: 110px;">@tempNombre</td>
                            <td style="min-width: 150px;">@tempObjetivo</td>
                            <td style="min-width: 150px;">@tempAlcance</td>
                            <td>@tempFormula</td>
                            <td>@ObtenerNombrePorId(tpIndi,"fkidtipoindicador","nombre")</td>
                            <td>@ObtenerNombrePorId(tpIndi,"fkidunidadmedicion","descripcion")</td>
                            <td style="min-width: 150px;">@tempMeta</td>
                            <td>@ObtenerNombrePorId(tpIndi,"fkidsentido","nombre")</td>
                            <td>@ObtenerNombrePorId(tpIndi,"fkidfrecuencia","nombre")</td>
                            <td>@ObtenerNombrePorId(tpIndi,"fkidarticulo","nombre")</td>
                            <td style="min-width: 150px;">@ObtenerNombrePorId(tpIndi,"fkidliteral","descripcion")</td>
                            <td style="min-width: 300px;">@ObtenerNombrePorId(tpIndi,"fkidnumeral","descripcion")</td>
                            <td style="min-width: 500px;">@ObtenerNombrePorId(tpIndi,"fkidparagrafo","descripcion")</td>
                            <td>
                                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" 
                                @onclick='() => 
                                    AbrirModal(
                                        tempId
                                        ,tempCode
                                        ,tempNombre
                                        ,tempObjetivo
                                        ,tempAlcance
                                        ,tempFormula
                                        ,tempTipoIndi
                                        ,tempUnidad
                                        ,tempMeta
                                        ,tempSentido
                                        ,tempFrec 
                                        ,tempArt
                                        ,tempLiteral
                                        ,tempNumeral
                                        ,tempPrgfo
                                        ,"Edit")'>Editar</button>
                            </td>
                            <td><button id="" class="btn btn-danger" @onclick="() => EliminarRegistro(tempId)">Eliminar</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

}

@if (mensaje != null)
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="liveToast" class="toast align-items-center text-white bg-@tipoAlerta border-0 show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    @mensaje
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close" @onclick="() => mensaje = null"></button>
            </div>
        </div>
    </div>
}


    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">PopUp</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    <label for="codigo" class="form-label">Código:</label>
                    <input type="text" id="codigo" class="form-control" @bind="codigoSeleccionado">
                    <br>
                    <label for="nombre" class="form-label">Nombre:</label>
                    <input type="text" id="nombre" class="form-control" @bind="nombreSeleccionado">
                    <br>
                    <label for="objetivo" class="form-label">Objetivo:</label>
                    <input type="text" id="objetivo" class="form-control" @bind="objetivoSeleccionado">
                    <br>
                    <label for="alcance" class="form-label">Alcance:</label>
                    <input type="text" id="alcance" class="form-control" @bind="alcanceSeleccionado">
                    <br>
                    <label for="formula" class="form-label">Formula:</label>
                    <input type="text" id="formula" class="form-control" @bind="formulaSeleccionada">
                    <br>
                    <label for="tpIndi" class="form-label">Tipo Indicador:</label>
                    <select class="form-control" @bind="tipoIndiSeleccionado">
                        <option value="">Seleccione un Tipo</option>
                        @foreach (var tpIndi in tipoIndicador)
                        {
                            <option value='@ObtenerValor(tpIndi, "id")'>@ObtenerValor(tpIndi, "nombre")</option>
                        }
                    </select>
                    <br>
                    <label for="unidad" class="form-label">Unidad de Medición</label>
                    <select class="form-control" @bind="unidadSeleccionada">
                        <option value="">Seleccione una unidad</option>
                        @foreach (var tpUni in unidadMedicion)
                        {
                            <option value='@ObtenerValor(tpUni, "id")'>@ObtenerValor(tpUni, "descripcion")</option>
                        }
                    </select>
                    <br>
                    <label for="meta" class="form-label">Meta:</label>
                    <input type="text" id="meta" class="form-control" @bind="metaSeleccionada">
                    <br>
                    <label for="sentido" class="form-label">Sentido</label>
                    <select class="form-control" @bind="sentidoSeleccionado">
                        <option value="">Seleccione un sentido</option>
                        @foreach (var tpSentido in sentido)
                        {
                            <option value='@ObtenerValor(tpSentido, "id")'>@ObtenerValor(tpSentido, "nombre")</option>
                        }
                    </select>
                    <br>
                    <label for="frecuencia" class="form-label">Frecuencia</label>
                    <select class="form-control" @bind="frecuenciaSeleccionada">
                        <option value="">Seleccione una frecuencia</option>
                        @foreach (var tpFrec in frecuencia)
                        {
                            <option value='@ObtenerValor(tpFrec, "id")'>@ObtenerValor(tpFrec, "nombre")</option>
                        }
                    </select>
                    <br>
                    <label for="frecuencia" class="form-label">Articulo</label>
                    <select class="form-control" @bind="articuloSeleccionado">
                        <option value="">Seleccione un Articulo</option>
                        @foreach (var tpArt in articulo)
                        {
                            <option value='@ObtenerValor(tpArt, "id")'>@ObtenerValor(tpArt, "nombre")</option>
                        }
                    </select>
                    <br>
                    <label for="frecuencia" class="form-label">Literal</label>
                    <select class="form-control" @bind="literalSeleccionado">
                        <option value="">Seleccione un Literal</option>
                        @foreach (var tpLit in literal)
                        {
                            <option value='@ObtenerValor(tpLit, "id")'>@ObtenerValor(tpLit, "id")</option>
                        }
                    </select>
                    <br>
                    <label for="frecuencia" class="form-label">Numeral</label>
                    <select class="form-control" @bind="numeralSeleccionado">
                        <option value="">Seleccione un Numeral</option>
                        @foreach (var tpNum in numeral)
                        {
                            <option value='@ObtenerValor(tpNum, "id")'>@ObtenerValor(tpNum, "id")</option>
                        }
                    </select>
                    <br>
                    <label for="frecuencia" class="form-label">Paragrafo</label>
                    <select class="form-control" @bind="paragrafoSeleccionado">
                        <option value="">Seleccione un Paragrafo</option>
                        @foreach (var tpPrg in paragrafo)
                        {
                            <option value='@ObtenerValor(tpPrg, "id")'>@ObtenerValor(tpPrg, "id")</option>
                        }
                    </select>

                    

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="@GuardarCambios">Save changes</button>
                </div>
            </div>
        </div>
    </div>



@code {
    // Lista para almacenar los productos que se obtienen de la API
    private List<Dictionary<string, object>> indicadores = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> tipoIndicador = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> unidadMedicion = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> sentido = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> frecuencia = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> articulo = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> literal = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> numeral = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> paragrafo = new List<Dictionary<string, object>>();
    
    // Bandera para indicar si se están cargando los datos
    private bool cargando = true;
    
    // Variable para almacenar mensajes de error
    private string? mensaje = null;

    //Variable para almacenar el tipo de alerta
    private string? tipoAlerta = "info";
    
    // Constantes para los parámetros de la API
    private const string PROYECTO = "pry";
    private const string TABLA = "indicador";

    // Método que se ejecuta cuando se inicializa el componente
    protected override async Task OnInitializedAsync()
    {
        // Llamar al método para cargar los productos
        await CargarIndicadores();
        await CargarTipoIndicador();
        await CargarUnidadmedicion();
        await CargarSentido();
        await CargarFrecuencia();
        await CargarArticulo();
        await CargarLiteral();
        await CargarNumeral();
        await CargarParagrafo();
    }

    private async Task CargarTipoIndicador(){
        tipoIndicador = await servicioEntidad.ObtenerTodosAsync("proyecto", "tipoindicador") ?? new();
    }

    private async Task CargarUnidadmedicion(){
        unidadMedicion = await servicioEntidad.ObtenerTodosAsync("proyecto", "unidadmedicion") ?? new();
    }

    private async Task CargarSentido(){
        sentido = await servicioEntidad.ObtenerTodosAsync("proyecto", "sentido") ?? new();
    }

    private async Task CargarFrecuencia(){
        frecuencia = await servicioEntidad.ObtenerTodosAsync("proyecto", "frecuencia") ?? new();
    }

    private async Task CargarArticulo(){
        articulo = await servicioEntidad.ObtenerTodosAsync("proyecto", "articulo") ?? new();
    }

    private async Task CargarLiteral(){
        literal = await servicioEntidad.ObtenerTodosAsync("proyecto", "literal") ?? new();
    }

    private async Task CargarNumeral(){
        numeral = await servicioEntidad.ObtenerTodosAsync("proyecto", "numeral") ?? new();
    }

    private async Task CargarParagrafo(){
        paragrafo = await servicioEntidad.ObtenerTodosAsync("proyecto", "paragrafo") ?? new();
    }

    // Método asíncrono para cargar los productos desde la API
    private async Task CargarIndicadores()
    {
        // Establecer la bandera de carga en verdadero
        cargando = true;
        // Limpiar cualquier mensaje de error previo
        mensaje = null;
        
        try
        {
            // Obtener todos los productos usando el servicio de entidades
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            
            // Si la lista no es null, asignarla a la variable productos
            if (resultado != null)
            {
                indicadores = resultado;
            }
            else
            {
                // Si es null, inicializar como lista vacía para evitar errores
                indicadores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            //Especificar tipo de alerta
            tipoAlerta = "danger";

            // En caso de error, guardar el mensaje y crear lista vacía
            mensaje = $"Error al cargar tipo de actores: {ex.Message}";
            indicadores = new List<Dictionary<string, object>>();
        }
        finally
        {
            // Establecer la bandera de carga en falso una vez finalizada la operación
            cargando = false;
        }
    }

    // Método para obtener un valor específico de un diccionario de manera segura
    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        // Verificar si el diccionario es null
        if (diccionario == null)
            return string.Empty;
            
        // Verificar si el diccionario contiene la clave
        if (diccionario.TryGetValue(clave, out var valor))
        {
            // Devolver el valor como cadena, o cadena vacía si es null
            return valor?.ToString() ?? string.Empty;
        }
        
        // Si la clave no existe, devolver cadena vacía
        return string.Empty;
    }

    // Método para formatear un valor como precio
    private string FormatearPrecio(string valor)
    {
        // Verificar si la cadena está vacía
        if (string.IsNullOrEmpty(valor))
            return "$0.00";
            
        // Intentar convertir el valor a decimal
        if (decimal.TryParse(valor, out decimal precio))
        {
            // Formatear como moneda con el símbolo $ y dos decimales
            return precio.ToString("C");
        }
        
        // Si no se puede convertir, devolver el valor original
        return valor;
    }

    public string idSeleccionado = "";
    public string codigoSeleccionado = "";
    public string nombreSeleccionado = "";
    public string objetivoSeleccionado = "";
    public string alcanceSeleccionado = "";
    public string formulaSeleccionada = "";
    public string tipoIndiSeleccionado = "";
    public string unidadSeleccionada = "";
    public string metaSeleccionada = "";
    public string sentidoSeleccionado = "";
    public string frecuenciaSeleccionada = "";
    public string articuloSeleccionado = "";
    public string literalSeleccionado = "";
    public string numeralSeleccionado = "";
    public string paragrafoSeleccionado = "";
    public string peticionSeleccionada = "";


    public void AbrirModal
        (
        string id
        ,string codigo
        ,string nombre
        ,string objetivo
        ,string alcance
        ,string formula
        ,string tpIndi
        ,string unidad
        ,string meta
        ,string sentido
        ,string frecuencia  
        ,string articulo
        ,string literal
        ,string numeral
        ,string paragrafo
        ,string peticion
        )
    {
        idSeleccionado = id;
        codigoSeleccionado = codigo;
        nombreSeleccionado = nombre;
        objetivoSeleccionado = objetivo;
        alcanceSeleccionado = alcance;
        formulaSeleccionada = formula;
        tipoIndiSeleccionado = tpIndi;
        unidadSeleccionada = unidad;
        metaSeleccionada = meta;
        sentidoSeleccionado = sentido;
        frecuenciaSeleccionada = frecuencia;
        articuloSeleccionado = articulo;
        literalSeleccionado = literal;
        numeralSeleccionado = numeral;
        paragrafoSeleccionado = paragrafo;
        peticionSeleccionada = peticion;
        
    }


    //================================ INICIO - Relacionamiento de ID con Nombre ====================================

    private string ObtenerNombrePorId(Dictionary<string, object> entidad, string nombreFk, string nombreCampo)
    {
        if (entidad.TryGetValue(nombreFk, out var fkObtenido))
        {

            List<Dictionary<string, object>> entidadConsultada = new List<Dictionary<string, object>>();;
            
            if(nombreFk == "fkidtipoindicador"){
                entidadConsultada = tipoIndicador;
            }
            else if(nombreFk == "fkidunidadmedicion")
            {
                entidadConsultada = unidadMedicion;
            }
            else if(nombreFk == "fkidsentido")
            {
                entidadConsultada = sentido;
            }
            else if(nombreFk == "fkidfrecuencia")
            {
                entidadConsultada = frecuencia;
            }
            else if(nombreFk == "fkidarticulo")
            {
                entidadConsultada = articulo;
            }
            else if(nombreFk == "fkidliteral")
            {
                entidadConsultada = literal;
            }
            else if(nombreFk == "fkidnumeral")
            {
                entidadConsultada = numeral;
            }
            else if(nombreFk == "fkidparagrafo")
            {
                entidadConsultada = paragrafo;
            }


            var consulta = entidadConsultada.FirstOrDefault(p => ObtenerValor(p, "id") == fkObtenido?.ToString());
            return consulta != null ? ObtenerValor(consulta, nombreCampo) : "(no encontrado)";
        }

        return "(no encontrado)";
    }



//================================ FIN - Relacionamiento de ID con Nombre ====================================


    private async Task GuardarCambios()
    {

        var body = new Dictionary<string, object>
        {
            { "codigo", codigoSeleccionado},
            { "nombre", nombreSeleccionado },
            { "objetivo", objetivoSeleccionado },
            { "alcance", alcanceSeleccionado },
            { "formula", formulaSeleccionada },
            { "fkidtipoindicador", tipoIndiSeleccionado },
            { "fkidunidadmedicion", unidadSeleccionada },
            { "meta", metaSeleccionada },
            { "fkidsentido", sentidoSeleccionado },
            { "fkidfrecuencia", frecuenciaSeleccionada },
            { "fkidarticulo", articuloSeleccionado },
            { "fkidliteral", literalSeleccionado },
            { "fkidnumeral", numeralSeleccionado },
            { "fkidparagrafo", paragrafoSeleccionado }
        };

        HttpResponseMessage tempRespuesta = new HttpResponseMessage();
        string tipoMsg = string.Empty;

        try
        {
            if(peticionSeleccionada == "Create")
            {
                var respuesta = await servicioEntidad.CrearAsync(PROYECTO, TABLA, body);
                tempRespuesta = respuesta;
                tipoMsg = "Creado";
            }
            else if(peticionSeleccionada == "Edit")
            {                
                var respuesta = await servicioEntidad.ActualizarAsync(PROYECTO, TABLA, "id", idSeleccionado ,body);
                tempRespuesta = respuesta;
                tipoMsg = "Actualizado";
                
            }
            else{

                tipoAlerta = "warning";
                mensaje = "Acción no permitida, seleccione una acción valida";
                resetMensaje();
            }


            var serverMessage = await tempRespuesta.Content.ReadAsStringAsync();


            if (!tempRespuesta.IsSuccessStatusCode)
            {
                tipoAlerta = "danger";
                // Si el servidor devuelve un mensaje, úsalo; de lo contrario, usa el ReasonPhrase
                mensaje = !string.IsNullOrWhiteSpace(serverMessage) ? serverMessage : tempRespuesta.ReasonPhrase;
            }
            else
            {
                tipoAlerta = "success";
                mensaje = !string.IsNullOrWhiteSpace(serverMessage) ? serverMessage : $"Registro {tipoMsg} Exitosamente!";
                resetMensaje();
            }

        }
        catch (HttpRequestException ex)
        {
            tipoAlerta = "danger";
            mensaje = $"Error en la petición: {ex.Message}";
            Console.WriteLine($"Error en la petición: {ex.Message}");
        }
        
    }
    

    private async Task EliminarRegistro(string id)
    {

        try
        {
            var respuesta = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", id);
            
            if (respuesta)
            {
                tipoAlerta = "success";
                mensaje = $"Registro Eliminado Exitosamente!";
                resetMensaje();
            }

        }
        catch (HttpRequestException ex)
        {
            tipoAlerta = "danger";
            mensaje = $"Error en la petición: {ex.Message}";
            Console.WriteLine($"Error en la petición: {ex.Message}");
        }
        
    }

    private async void resetMensaje(){
        
        await Task.Delay(2000);
        mensaje = null;
        tipoAlerta = "info";
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

}